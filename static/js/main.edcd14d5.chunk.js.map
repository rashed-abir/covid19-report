{"version":3,"sources":["components/LineGraph.js","components/Card.js","assets/corona.png","components/Summury.js","components/Config.js","App.js","reportWebVitals.js","index.js"],"names":["LineGraph","props","className","data","labels","label","map","l","substr","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","yAxis","Card","children","Summury","totalConfiremd","totalRecoverd","totalDeaths","country","src","corona","alt","value","displayType","thousandSeparator","axiosInstance","axios","create","baseURL","App","useState","setTotalConfirmed","totalRecovered","setTotalRecovered","totalDeath","setTotalDeath","loading","setLoading","summury","setSummery","days","setDays","setCountry","coronaCountAr","setCoronaCountAr","setLabel","useEffect","Config","get","then","res","status","Global","TotalConfirmed","TotalRecovered","TotalDeaths","formateDate","date","d","Date","year","getFullYear","month","getMonth","slice","_date","getDate","getReportByDateRange","countrySlug","from","to","Cases","xAxisLabel","covidDetails","Countries","find","Slug","onChange","e","target","setDate","Country","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.edcd14d5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nfunction LineGraph(props) {\r\n  return (\r\n    <div className=\"graph\">\r\n      <Line\r\n        data={{\r\n          labels: props.label.map((l) => l.substr(0, 10)),\r\n          datasets: [\r\n            {\r\n              label: \"Corona Virus across the country\",\r\n              fill: true,\r\n              lineTension: 0.1,\r\n              backgroundColor: \"rgba(75,192,192,0.4)\",\r\n              borderColor: \"rgba(75,192,192,1)\",\r\n              borderCapStyle: \"butt\",\r\n              borderDash: [],\r\n              borderDashOffset: 0.0,\r\n              borderJoinStyle: \"miter\",\r\n              pointBorderColor: \"rgba(75,192,192,1)\",\r\n              pointBackgroundColor: \"#fff\",\r\n              pointBorderWidth: 1,\r\n              pointHoverRadius: 5,\r\n              pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\r\n              pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n              pointHoverBorderWidth: 2,\r\n              pointRadius: 1,\r\n              pointHitRadius: 10,\r\n              data: props.yAxis,\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React from 'react'\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div className=\"card\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","export default __webpack_public_path__ + \"static/media/corona.e0d94fcd.png\";","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport corona from \"../assets/corona.png\";\r\n\r\nfunction Summury(props) {\r\n  const { totalConfiremd, totalRecoverd, totalDeaths, country } = props;\r\n\r\n  return (\r\n    <div className=\"all-info\">\r\n      <div>\r\n        <img src={corona} alt=\"covid-19\" />\r\n      </div>\r\n      <div>\r\n        <h1>{country === \"\" ? \"World Wide Corona Tracker\" : country}</h1>\r\n      </div>\r\n      <div className=\"detail-box\">\r\n        <Card>\r\n          <span className=\"heading\" >Total Confirmed</span>\r\n          <br />\r\n          <span>\r\n            {\r\n              <NumberFormat\r\n                value={totalConfiremd}\r\n                displayType={\"text\"}\r\n                thousandSeparator={true}\r\n              />\r\n            }\r\n          </span>\r\n        </Card>\r\n        <Card>\r\n          <span className=\"heading\">Total Recovered</span>\r\n          <br />\r\n          <span>\r\n            {\r\n              <NumberFormat\r\n                value={totalRecoverd}\r\n                displayType={\"text\"}\r\n                thousandSeparator={true}\r\n              />\r\n            }\r\n          </span>\r\n        </Card>\r\n        <Card>\r\n          <span className=\"heading\">Total Death</span>\r\n          <br />\r\n          <span>\r\n            {\r\n              <NumberFormat\r\n                value={totalDeaths}\r\n                displayType={\"text\"}\r\n                thousandSeparator={true}\r\n              />\r\n            }\r\n          </span>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Summury;\r\n","import axios from 'axios';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: `https://api.covid19api.com`\r\n})\r\n\r\nexport default axiosInstance;","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport LineGraph from \"./components/LineGraph\";\nimport Summury from \"./components/Summury\";\nimport Config from \"./components/Config\";\n\nfunction App() {\n  const [totalConfiremd, setTotalConfirmed] = useState(0);\n  const [totalRecovered, setTotalRecovered] = useState(0);\n  const [totalDeath, setTotalDeath] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [summury, setSummery] = useState({});\n  const [days, setDays] = useState(7);\n  const [country, setCountry] = useState(\"\");\n  const [coronaCountAr, setCoronaCountAr] = useState([]);\n  const [label, setLabel] = useState([]);\n\n  useEffect(() => {\n    setLoading(true);\n    Config.get(`/summary`).then((res) => {\n      setLoading(false);\n      if (res.status === 200) {\n        setTotalConfirmed(res.data.Global.TotalConfirmed);\n        setTotalRecovered(res.data.Global.TotalRecovered);\n        setTotalDeath(res.data.Global.TotalDeaths);\n        setSummery(res.data);\n      }\n    });\n  }, []);\n\n  const formateDate = (date) => {\n    const d = new Date(date);\n    const year = d.getFullYear();\n    const month = `${d.getMonth() + 1}`.slice(-2);\n    const _date = d.getDate();\n    return `${year}-${month}-${_date}`;\n  };\n\n  const dateHandle = (e) => {\n    setDays(e.target.value);\n    const d = new Date();\n    const to = formateDate(d);\n    const from = formateDate(d.setDate(d.getDate() - e.target.value));\n    getReportByDateRange(country, from, to);\n  };\n\n  const countryHandle = (e) => {\n    setCountry(e.target.value);\n    const d = new Date();\n    const to = formateDate(d);\n    const from = formateDate(d.setDate(d.getDate() - days));\n\n    // console.log(from , to)\n\n    getReportByDateRange(e.target.value, from, to);\n  };\n\n  const getReportByDateRange = (countrySlug, from, to) => {\n    Config.get(\n      `https://api.covid19api.com/country/${countrySlug}/status/confirmed?from=${from}T00:00:00Z&to=${to}T00:00:00Z`\n    ).then((res) => {\n      const yAxis = res.data.map((d) => d.Cases);\n      const xAxisLabel = res.data.map((d) => d.Date);\n      const covidDetails = summury.Countries.find(\n        (country) => country.Slug === countrySlug\n      );\n      setCoronaCountAr(yAxis);\n      setTotalConfirmed(covidDetails.TotalConfirmed);\n      setTotalRecovered(covidDetails.TotalRecovered);\n      setTotalDeath(covidDetails.TotalDeaths);\n      setLabel(xAxisLabel);\n    });\n  };\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  return (\n    <div className=\"App\">\n      <Summury\n        totalConfiremd={totalConfiremd}\n        totalRecoverd={totalRecovered}\n        totalDeaths={totalDeath}\n        country={country}\n      />\n      <div className=\"select-detail\">\n        <select value={country} onChange={countryHandle}>\n          <option value=\"\">Select Country</option>\n          {summury.Countries &&\n            summury.Countries.map((country) => (\n              <option key={country.Slug} value={country.Slug}>\n                {country.Country}\n              </option>\n            ))}\n        </select>\n        <select value={days} onChange={dateHandle}>\n          <option value=\"7\">Last 7 Days</option>\n          <option value=\"30\">Last 30 Days</option>\n          <option value=\"90\">Last 90 Days</option>\n        </select>\n      </div>\n      <LineGraph yAxis={coronaCountAr} label={label} />\n      <footer>Developed by @rashed</footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}